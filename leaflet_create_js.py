#!/usr/bin/env python3

# ==============================================================================
# Script: leaflet_create_js.py
#
# Description:
#   A utility script that generates a single JavaScript configuration file
#   (pollutant_list.js) for the web front-end. It scans the processed data
#   directory (the output from the previous step) to dynamically create a
#   list of all available pollutants. It also embeds static arrays for the
#   available years and state codes, which are used to populate the dropdown
#   menus in the user interface.
#
#   This script is designed to be run once after all other data processing
#   is complete.
#
# Usage:
#   python3 leaflet_create_js.py <path_to_pollutant_data_directory>
#
#   Example:
#   python3 leaflet_create_js.py ./leaflet_json_pollutant_list
#
# Dependencies:
#   - Python 3
# ==============================================================================

import os
import json
import argparse
import logging

# --- SCRIPT SETUP ---

# Configure basic logging for standardized and informative output.
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

# --- STATIC CONFIGURATION ---
# These values define the content for the front-end dropdown menus. They are
# kept here as constants for easy updates.

# The range of years to be included in the `availableYears` array in the JS file.
START_YEAR = 1983
END_YEAR = 2025 # This year is inclusive.

# The complete list of state and territory codes for the `stateCodes` array.
# This list is sorted alphabetically for consistent display in the UI.
STATE_CODES = [
    "AK", "AL", "AR", "AS", "AZ", "CA", "CO", "CT", "DC", "DE", "FL", "GA", 
    "GU", "HI", "IA", "ID", "IL", "IN", "KS", "KY", "LA", "MA", "MD", "ME", 
    "MI", "MN", "MO", "MP", "MS", "MT", "NC", "ND", "NE", "NH", "NJ", "NM", 
    "NV", "NY", "OH", "OK", "OR", "PA", "PR", "RI", "SC", "SD", "TN", "TX", 
    "UT", "VA", "VI", "VT", "WA", "WI", "WV", "WY"
]

def generate_js_file(input_dir):
    """
    Scans the data directory to generate a JavaScript file containing lists
    for pollutants, available years, and states.

    Args:
        input_dir (str): The path to the root directory containing the year
                         folders with pollutant JSON files.
    """
    # --- 1. Dynamic Path Determination ---
    # The output file is placed in the parent of the input directory
    # (e.g., if input is '.../leaflet/2_leaflet_json_pollutant_list',
    # output will be in '.../leaflet/').
    output_dir = os.path.dirname(input_dir)
    output_filename = 'pollutant_list.js'
    final_output_path = os.path.join(output_dir, output_filename)

    # --- 2. Generate Pollutant Data from Files ---
    logging.info(f"Scanning data source: {input_dir}...")
    unique_pollutant_filenames = set()

    if not os.path.isdir(input_dir):
        logging.error(f"The data source directory does not exist: {input_dir}")
        return

    # Walk the directory tree to find all unique pollutant JSON files.
    # Using a 'set' automatically handles duplicates.
    for dirpath, _, filenames in os.walk(input_dir):
        for filename in filenames:
            if filename.endswith('.json'):
                unique_pollutant_filenames.add(filename)

    if not unique_pollutant_filenames:
        logging.warning("No .json files were found. The generated pollutant list will be empty.")
    else:
        logging.info(f"Found {len(unique_pollutant_filenames)} unique pollutant files.")

    # Create a list of objects for the JS file, converting filenames to display names.
    pollutant_data = []
    for filename in sorted(list(unique_pollutant_filenames)):
        display_name = filename.removesuffix('.json').replace('_', ' ')
        pollutant_data.append({
            'filename': filename,
            'displayName': display_name
        })

    # --- 3. Generate Available Years Array ---
    available_years = [str(year) for year in range(START_YEAR, END_YEAR + 1)]
    logging.info(f"Generated {len(available_years)} years from {START_YEAR} to {END_YEAR}.")

    # --- 4. Assemble Final JavaScript Content ---
    # Use json.dumps for clean, valid JSON/JS object formatting.
    js_pollutants_string = json.dumps(pollutant_data, indent=2)
    js_years_string = json.dumps(available_years, indent=2)
    js_states_string = json.dumps(STATE_CODES, indent=2)

    final_js_content = f"""// This file is auto-generated by the leaflet_create_js.py script.
// Do not edit this file manually.

const pollutantData = {js_pollutants_string};

const availableYears = {js_years_string};

const stateCodes = {js_states_string};
"""

    # --- 5. Write to the Calculated Output File Path ---
    logging.info(f"Attempting to write config file to: {final_output_path}")
    try:
        with open(final_output_path, 'w', encoding='utf-8') as f:
            f.write(final_js_content)
        logging.info(f"Successfully created JavaScript config file.")
    except IOError as e:
        logging.error(f"Error writing to file '{final_output_path}': {e}")
    except PermissionError:
        logging.error(f"Permission denied. Could not write to '{final_output_path}'. Please check directory permissions.")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Generate a JS configuration file from processed pollutant data."
    )
    parser.add_argument(
        "input_dir",
        type=str,
        help="The path to the directory containing the processed pollutant JSON files (e.g., './leaflet_json_pollutant_list')."
    )
    
    args = parser.parse_args()
    generate_js_file(args.input_dir)